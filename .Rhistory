select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
df_falciparum_pre = read_csv('results/preds_microrregion_falciparum_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_falciparum = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_falciparum_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_vivax.png')
#falciparum preds
df_falciparum |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_falciparum.png')
#vivax erros rmsle
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RMLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_vivax_rsle.png')
#falciparum erros rmsle
df_falciparum |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RMLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_falciparum_rsle.png')
#vivax real in 201711
df_vivax |> filter(mes == '11' & ano == 2017) |>
ggplot() +
geom_sf(aes(fill = real), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'N° Casos') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/real vivax 201711.png')
#vivax preds in 201711
df_vivax |> filter(mes == '11' & ano == 2017) |>
ggplot() +
geom_sf(aes(fill = preds), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Predição a cada mil habitantes') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/preds vivax 201711.png')
#other plots------------------------------------------------------------
#plot real values per year
#2017 had more malaria cases. So, the predictions (in the nominal scale)
#probably will be worse in that year.
df_vivax_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real)) |>
ggplot(aes(x = dia, y = real)) +
geom_line(size = .8) +
ylim(0, 2.5) +
theme_bw() +
labs(x = 'Tempo', y = 'Número de casos')
ggsave('results/real_vivax.png')
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#using predictions off 2016 and 2017 to correct the predicts magnitude of 2018
#the first model is good to predict 0 values. So the pred must be greater than
#0.005 (the max pred value when the real incidence is 0)
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & preds > 0.005)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 &
preds > 0.005)
#okay: 11.0773 is the preds coefficient.
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
#creating new_preds column
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & preds > 0.005,
preds*11.0773, preds))
#creating new_difs and new_difs_rmsle columns
df_vivax_pre = df_vivax_pre |>
mutate(new_difs = real - new_preds) |>
mutate(new_difs_rmsle = sqrt((log(real + 1) - log(new_preds + 1))^2))
#get spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_vivax_2018_corrigido.png')
library(readr)
library(INLA)
library(dplyr)
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_v = read_csv('data/output_data/micro_reg_v_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_v$idArea = pmatch(
micro_v$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_v$idArea2 = micro_v$idArea
#creating id interaction (between area and time)
micro_v$idInteraction = as.numeric(interaction(micro_v$idArea,
micro_v$idMes))
real_rates_all = micro_v$numCasos*1000/micro_v$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp + offset(log(populacao))
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp + offset(log(populacao))
#formula2
bell_fit2 = inla(
formula = formula2, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = 234280.40; DIC saturado = 151916.78; WAIC = 1029008.68
#ambas as variáveis significativas pelo intervalo de credibilidade
bell_fit2 |> summary()
#formula4
bell_fit4 = inla(
formula = formula4, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = 111414.37; DIC saturado = 27302.40; WAIC = 109766.96
#piora em relação ao modelo anterior.
#ambas as covariáveis consideradas significantes
bell_fit4 |> summary()
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp + offset(log(populacao))
#formula4
nbinomial_fit4 = inla(
formula = formula4, family = 'nbinomial', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = 130166.51; WAIC = 130598.41
#piora em relação ao modelo anterior.
#ambas as covariáveis consideradas significantes
nbinomial_fit4 |> summary()
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_f = read_csv('data/output_data/micro_reg_f_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_f$idArea = pmatch(
micro_f$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_f$idArea2 = micro_f$idArea
#creating id interaction (between area and time)
micro_f$idInteraction = as.numeric(interaction(micro_f$idArea,
micro_f$idMes))
real_rates_all = micro_f$numCasos*100000/micro_f$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
temp + offset(log(populacao))
#formula4
bell_fit4 = inla(
formula = formula4, family = 'bell', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = 73029.29; DIC saturated = 22117.46; WAIC = 72251.96
#piora em relação ao modelo anterior.
#rhum não considerada significante. Rodando novamente sem ela.
bell_fit4 |> summary()
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
temp + rhum + offset(log(populacao))
#formula4
nbinomial_fit4 = inla(
formula = formula4, family = 'nbinomial', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#formula4
bell_fit4 = inla(
formula = formula4, family = 'bell', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = 83208.45; WAIC = 83525.96
#melhora um pouco em relação ao modelo anterior.
#nenhuma das duas consideradas significantes, mas contribuem para
#a queda do DIC
nbinomial_fit4 |> summary()
#DIC = 73029.29; DIC saturated = 22117.46; WAIC = 72251.96
#piora em relação ao modelo anterior.
#nenhuma das variáveis é significante
bell_fit4 |> summary()
nbinomial_fit4$summary.fixed$0.025quant
nbinomial_fit4$summary.fixed$0.025quant
nbinomial_fit4$summary.fixed$`0.025quant`
nbinomial_fit4$summary.lincomb
nbinomial_fit |> summary()
nbinomial_fit4 |> summary()
nbinomial_fit4$summary.fixed
#formula4
nbinomial_fit4 = inla(
formula = formula4, family = 'nbinomial', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_v = read_csv('data/output_data/micro_reg_v_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_v$idArea = pmatch(
micro_v$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_v$idArea2 = micro_v$idArea
#creating id interaction (between area and time)
micro_v$idInteraction = as.numeric(interaction(micro_v$idArea,
micro_v$idMes))
real_rates_all = micro_v$numCasos*100000/micro_v$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
#formulas------------------------------------------------------------------
formula1 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
offset(log(populacao))
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp + offset(log(populacao))
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') + offset(log(populacao))
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp + offset(log(populacao))
#formula4
nbinomial_fit4 = inla(
formula = formula4, family = 'nbinomial', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
nbinomial_fit4$summary.fixed
0.0001*1000
ary(dplyr)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_falciparum_pre = read_csv('results/preds_microrregion_falciparum_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
df_falciparum = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_falciparum_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#vivax erros rmsle
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RMSLE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_vivax_rsle.png')
#falciparum erros rmsle
df_falciparum |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RMSLE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave('results/erros_falciparum_rsle.png')
install.packages("tinytex")
tinytex::install_tinytex()
data(BRASIL_INLA_mes_viv.rdata)
data('BRASIL_INLA_mes_viv.rdata')
data('../BRASIL_INLA_mes_viv.rdata')
data('~/Projetos/TCC/malaria/BRASIL_INLA_mes_viv.rdata')
('~/Projetos/TCC/malaria/BRASIL_INLA_mes_viv.rdata')
read('~/Projetos/TCC/malaria/BRASIL_INLA_mes_viv.rdata')
load("~/Projetos/TCC/malaria/BRASIL_INLA_mes_viv.rdata")
View(BASEP)
install.packages("shiny")
shiny::runApp('malaria_models')
runApp('malaria_models')
runApp('malaria_models')
