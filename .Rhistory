image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_v$idArea = pmatch(
micro_v$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_v$idArea2 = micro_v$idArea
#creating id interaction (between area and time)
micro_v$idInteraction = as.numeric(interaction(micro_v$idArea,
micro_v$idMes))
107*12
real_rates_all = micro_v$numCasos*1000/micro_v$populacao
real_rates_test = real_rates_all[(20545 - 1284: 20544)]
#formulas---------------------------------------------------------------
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp + offset(log(populacao))
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') + offset(log(populacao))
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp + offset(log(populacao))
View(micro_v)
micro_v = micro_v |>
mutate(Y = ifelse(ano == 2018, NA, numCasos))
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
1000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 1284: 20544)]
rmse = function(real, pred){
sqrt(mean((real - pred)^2))
}
mae = function(real, pred){
mean(abs(real - pred))
}
mbe = function(real, pred){
abs(mean(real - pred))
}
rae = function(real, pred){
sum(abs(real - pred))/sum(abs(real - mean(real)))
}
rse = function(real, pred){
sum((real - pred)^2)/sum((real - mean(real))^2)
}
nrmse = function(real, pred){
rmse(real, pred)/max(real)
}
rmsle = function(real, pred){
sqrt(mean((log(real + 1) - log(pred + 1))^2))
}
mbe(real_rates_test, bell_rate_test)
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, bell_rate_test)
rae(real_rates_test, bell_rate_test)
rmsle(real_rates_test, bell_rate_test)
rse(real_rates_test, bell_rate_test)
cor(real_rates_test, bell_rate_test)
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
View(micro_v)
formula3 = Y ~ 1 + f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') + offset(log(populacao))
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
1000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 1284: 20544)]
mbe(real_rates_test, bell_rate_test)
nrmse(real_rates_test, bell_rate_test)
rae(real_rates_test, bell_rate_test)
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
1000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 1284: 20544)]
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
micro_v = micro_v |>
mutate(Y = ifelse(ano == 2018 & mes >= 10, NA, numCasos))
real_rates_all = micro_v$numCasos*1000/micro_v$populacao
real_rates_test = real_rates_all[(20545 - 321: 20544)]
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
1000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 321: 20544)]
mbe(real_rates_test, bell_rate_test)
nrmse(real_rates_test, bell_rate_test)
rae(real_rates_test, bell_rate_test)
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
View(df_vivax_pre)
df_vivax_teste = df_vivax_pre |> filter(ano == 2018)
df_vivax_train = df_vivax_pre |> filter(ano < 2018)
View(df_vivax_pre)
fit = lm(real ~ preds)
fit = lm(real ~ preds, data = df_vivax_train)
predict(df_vivax_teste)
summary(fit)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015)
fit = lm(real ~ preds, data = df_vivax_train)
summary(fit)
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & real != 0)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 & real != 0)
fit = lm(real ~ preds, data = df_vivax_train)
summary(fit)
predict(fit, newdata = df_vivax_train)
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
predict(fit, newdata = df_vivax_train)
vet = predict(fit, newdata = df_vivax_train)
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & real != 0, vet, preds))
cor(df_vivax_pre$new_preds, df_vivax_pre$real)
cor(df_vivax_pre$new_preds |> filter(ano == 2018 & real != 0),
df_vivax_pre$real |> filter(ano == 2018 & real != 0))
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & real != 0)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 & real != 0)
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & real != 0, vet, preds))
vet = predict(fit, newdata = df_vivax_train)
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & real != 0,
predict(fit, newdata = df_vivax_train), preds))
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & real != 0,
preds*11.085, preds))
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & real != 0)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 & real != 0)
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & real != 0,
preds*11.085, preds))
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
df_vivax_pre = df_vivax_pre |>
mutate(new_difs = real - new_preds)
#spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada mil habitantes
por microrregião - Vivax')
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada mil habitantes
por microrregião - Vivax')
df_vivax = df_vivax |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(new_preds + 1))^2))
#vivax erros rmsle
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RSLE a cada mil habitantes
por microrregião - Vivax')
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
View(df_vivax_pre)
df_vivax_pre |> filter(real == 0) |> select(preds) |> summary()
df_vivax_pre |> filter(real != 0) |> select(preds) |> summary()
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & preds > 0.005)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 &
preds > 0.005)
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & preds > 0.005,
preds*11.0773, preds))
cor(df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(new_preds) |>
pull(),
df_vivax_pre |> filter(ano == 2018 & real != 0) |> select(real) |>
pull())
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#using predictions off 2016 and 2017 to correct the predicts magnitude of 2018
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & preds > 0.005)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 &
preds > 0.005)
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
View(df_vivax_pre)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#using predictions off 2016 and 2017 to correct the predicts magnitude of 2018
#the first model is good to predict 0 values. So the pred must be greater than
#0.005 (the max pred value when the real incidence is 0)
df_vivax_teste = df_vivax_pre |> filter(ano == 2018 & preds > 0.005)
df_vivax_train = df_vivax_pre |> filter(ano < 2018 & ano > 2015 &
preds > 0.005)
#okay: 11.0773 is the preds coefficient.
fit = lm(real ~ -1 + preds, data = df_vivax_train)
summary(fit)
#creating new_preds column
df_vivax_pre = df_vivax_pre |>
mutate(new_preds = ifelse(ano == 2018 & preds > 0.005,
preds*11.0773, preds))
#creating new_difs and new_difs_rmsle columns
df_vivax_pre = df_vivax_pre |>
mutate(new_difs = real - new_preds) |>
mutate(new_difs_rmsle = sqrt((log(real + 1) - log(new_preds + 1))^2))
#get spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#get spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original (acima) |
Ajuste corrigido (abaixo)')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original')
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
#vivax_preds
df_vivax |> filter((mes == '11') & (ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10)
name = 'Erro nominal') +
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original')
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '11') & (ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste original')
ggsave('results/erros_vivax_2018.png')
#vivax_preds
df_vivax |> filter((mes == '06' | mes == '11') &
(ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = new_difs), color = 'black', size = .15) +
scale_fill_gradient(low = '#d7e1ee', high = '#991f17',
limits = c(-5, 10),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição - Ajuste corrigido')
ggsave('results/erros_vivax_2018_corrigido.png')
