labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Vivax')
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal a cada 100 mil habitantes') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Vivax')
library(dplyr)
library(readr)
library(ggplot2)
library(tidyr)
#get data in wide format to make easier plots
df_vivax_pre = read_csv('results/preds_microrregion_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
df_falciparum_pre = read_csv('results/preds_microrregion_falciparum_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#spatial information for spatial plot
df_vivax = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_vivax_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
df_falciparum = geobr::read_micro_region(year = 2017, simplified = F) |>
select('code_micro', 'name_micro') |>
inner_join(
df_falciparum_pre,
by = c('code_micro' = 'codMicroRes'),
multiple = 'all'
)
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal a cada 100 mil habitantes') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Vivax')
ggsave('results/erros_vivax.png')
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro por 100 mil habitantes') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Vivax')
#ploting map---------------------------------------------------------------
#vivax_preds
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Vivax')
ggsave('results/erros_vivax.png')
#falciparum preds
df_falciparum |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
por microrregião - Falciparum')
ggsave('results/erros_falciparum.png')
#vivax erros rmsle
df_vivax |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RSLE a cada 100 mil habitantes
por microrregião - Vivax')
ggsave('results/erros_vivax_rsle.png')
#falciparum erros rmsle
df_falciparum |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RSLE a cada 100 mil habitantes
por microrregião - Falciparum')
ggsave('results/erros_falciparum_rsle.png')
#vivax real in 201711
df_vivax |> filter(mes == '11' & ano == 2017) |>
ggplot() +
geom_sf(aes(fill = real), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'N° Casos') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Casos de malária a cada 100 mil habitantes
por microrregião em 11/2017 - Vivax')
#vivax real in 201711
df_vivax |> filter(mes == '11' & ano == 2017) |>
ggplot() +
geom_sf(aes(fill = real), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'N° Casos') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Casos de malária a cada 100 mil habitantes
por microrregião em 11/2017 - Vivax')
ggsave('results/real vivax 201711.png')
ggsave('results/preds vivax 201711.png')
#other plots------------------------------------------------------------
#plot real values per year
#2017 had more malaria cases. So, the predictions (in the nominal scale)
#probably will be worse in that year.
df_vivax_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real)) |>
ggplot(aes(x = dia, y = real)) +
geom_line(size = .8) +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
na Amazônia Legal ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
ggsave('results/real_vivax.png')
#vivax preds in 201711
df_vivax |> filter(mes == '11' & ano == 2017) |>
ggplot() +
geom_sf(aes(fill = preds), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Predição a cada 100 mil habitantes') +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Predição de malária a cada 100 mil habitantes
por microrregião em 11/2017 - Vivax')
ggsave('results/preds vivax 201711.png')
library(readr)
library(INLA)
#preparing data------------------------------------------------------------
#path
am_path = 'outputs/am_map.graph'
#read data
am_v = read_csv('data/output_data/am_v_df.csv')
#spatial data
am_spatial = read_csv('data/spatial_data/am_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(am_path)), xlab = '', ylab = '')
#creating id area
am_v$idArea = pmatch(
am_v$codMunRes,
am_spatial$code_muni,
duplicates.ok = T
)
am_v$idArea2 = am_v$idArea
#creating id interaction (between area and time)
am_v$idInteraction = as.numeric(interaction(am_v$idArea,
am_v$idMes))
real_rates_all = am_v$numCasos*100000/am_v$populacao
real_rates_test = real_rates_all[(11905 - 2232: 11904)]
#formulas------------------------------------------------------------------
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = am_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') + offset(log(populacao))
#bell----------------------------------------------------------------------
bell_fit = inla(
formula = formula3, family = 'bell', data = am_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
bell_fit |> summary()
hist(bell_fit$cpo$pit, breaks = 10, main = '', xlab = 'PIT')
#bell predicted rate all and test
bell_rate_all = bell_fit$summary.fitted.values$mode*100000/am_v$populacao
bell_rate_test = bell_rate_all[(11905 - 2232: 11904)]
#tables of errors----------------------------------------------------------
test_error = tibble(
dist = 'bell',
mbe = c(
mbe(real_rates_test, bell_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test)
)
)
rmse = function(real, pred){
sqrt(mean((real - pred)^2))
}
mae = function(real, pred){
mean(abs(real - pred))
}
mbe = function(real, pred){
abs(mean(real - pred))
}
rae = function(real, pred){
sum(abs(real - pred))/sum(abs(real - mean(real)))
}
rse = function(real, pred){
sum((real - pred)^2)/sum((real - mean(real))^2)
}
nrmse = function(real, pred){
rmse(real, pred)/max(real)
}
rmsle = function(real, pred){
sqrt(mean((log(real + 1) - log(pred + 1))^2))
}
#tables of errors----------------------------------------------------------
test_error = tibble(
dist = 'bell',
mbe = c(
mbe(real_rates_test, bell_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test)
)
)
test_error |> View()
test_error |> write_csv('results/test_metrics_am_vivax.csv')
plot(bell_rate_test, real_rates_test)
#create columns with predictions-------------------------------------------
am_v = am_v |>
dplyr::mutate(bell = bell_rate_all,
real = real_rates_all)
#results per state---------------------------------------------------------
am_v |>
select(
codUF, siglaUF, codMunRes, nomeMunRes, ano, mes,
real, bell
) |> write_csv('results/preds_am_vivax_df.csv')
am_v |>
select(
codUF, siglaUF, codMunRes, nomeMunRes, ano, mes,
real, bell
) |> View()
#error analysis for amazonia state------------------------------------------
df_am_v = read_csv('results/preds_am_vivax_df.csv') |>
mutate(difs = real - preds) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(preds + 1))^2))
#error analysis for amazonia state------------------------------------------
df_am_v = read_csv('results/preds_am_vivax_df.csv') |>
mutate(difs = real - bell) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(bell + 1))^2))
#error analysis for amazonia state------------------------------------------
df_am_v_pre = read_csv('results/preds_am_vivax_df.csv') |>
mutate(difs = real - bell) |>
mutate(mes = sprintf('%02d', mes)) |>
mutate(difs_rmsle = sqrt((log(real + 1) - log(bell + 1))^2))
#spatial information for spatial plot
df_am_v = geobr::read_municipality(code_muni = 'AM',
year = 2017, simplified = F) |>
select('code_muni', 'name_muni') |>
inner_join(
df_am_v_pre,
by = c('code_muni' = 'codMuniRes'),
multiple = 'all'
)
View(df_am_v)
#spatial information for spatial plot
df_am_v = geobr::read_municipality(code_muni = 'AM',
year = 2017, simplified = F) |>
select('code_muni', 'name_muni') |>
inner_join(
df_am_v_pre,
by = c('code_muni' = 'codMunRes'),
multiple = 'all'
)
#spatial plot am
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
no estado da Amazônia - Vivax')
ggsave('results/erros_am_vivax.png')
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = rlse), color = 'black', size = .15) +
geom_sf(aes(fill = rlse), color = 'black', size = .15) +
geom_sf(aes(fill = rlse), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RLSE de predição a cada 100 mil habitantes
no estado da Amazônia - Vivax')
View(df_am_v)
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmlse), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmlse), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmlse), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RLSE de predição a cada 100 mil habitantes
no estado da Amazônia - Vivax')
View(df_am_v)
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RLSE de predição a cada 100 mil habitantes
no estado da Amazônia - Vivax')
ggsave('results/erros_am_rlse_vivax.png')
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real),
bell = mean(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8) +
geom_line(aes(y = bell), size = .8, linetype = 2)
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real),
bell = mean(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8, name = 'Número real de casos') +
geom_line(aes(y = bell), size = .8, name = 'Número previsto de casos',
linetype = 2) +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
na Amazônia Legal ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
#spatial plot am
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
geom_sf(aes(fill = difs), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'Erro nominal') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'Erros nominais de predição a cada 100 mil habitantes
no estado do Amazonas - Vivax')
ggsave('results/erros_am_vivax.png')
df_am_v |> filter((mes == '02' | mes == '06' | mes == '11') &
(ano == 2016 | ano == 2017 | ano == 2018)) |>
ggplot() +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
geom_sf(aes(fill = difs_rmsle), color = 'black', size = .15) +
scale_fill_gradientn(colours = c('#d7e1ee', '#991f17'),
name = 'RLSE') +
facet_wrap(~ano + mes) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(subtitle = 'RLSE de predição a cada 100 mil habitantes
no estado di Amazonas - Vivax')
ggsave('results/erros_am_rlse_vivax.png')
#comparing real and preds
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real),
bell = mean(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8, colour = 'real') +
geom_line(aes(y = bell), size = .8, linetype = 2, colour = 'bell') +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
no estado do Amazonas ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
#comparing real and preds
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real),
bell = mean(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8, colour = 'red') +
geom_line(aes(y = bell), size = .8, linetype = 2, colour = 'blue') +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
no estado do Amazonas ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
#comparing real and preds
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = sum(real),
bell = sum(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8, colour = 'red') +
geom_line(aes(y = bell), size = .8, linetype = 2, colour = 'blue') +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
no estado do Amazonas ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
#comparing real and preds
df_am_v_pre |>
mutate(dia = as.Date(paste(ano, '-', mes, '-01', sep = ''))) |>
group_by(dia) |> summarise(real = mean(real),
bell = mean(bell)) |>
ggplot(aes(x = dia)) +
geom_line(aes(y = real), size = .8, colour = 'red') +
geom_line(aes(y = bell), size = .8, linetype = 2, colour = 'blue') +
theme_bw() +
labs(subtitle = 'Número médio de casos de malária a cada 100 mil habitantes
no estado do Amazonas ao longo do tempo - Vivax',
x = 'Tempo', y = 'Número de casos')
