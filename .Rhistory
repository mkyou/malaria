control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zip predicts
zero_poi_fit3_rate_all = zeroinflatedpoisson1_fit2$summary.fitted.values$mode*
100000/micro_v$populacao
zero_poi_rate_test = zero_poi_fit3_rate_all[(20545 - 3852: 20544)]
#zeroinflatednbinomial
zeroinflatednbinomial1_fit4 = inla(
formula = formula4, family = 'zeroinflatednbinomial1', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#tables of errors----------------------------------------------------------
test_errors_vivax = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
rmse = function(real, pred){
sqrt(mean((real - pred)^2))
}
mae = function(real, pred){
mean(abs(real - pred))
}
mbe = function(real, pred){
abs(mean(real - pred))
}
rae = function(real, pred){
sum(abs(real - pred))/sum(abs(real - mean(real)))
}
rse = function(real, pred){
sum((real - pred)^2)/sum((real - mean(real))^2)
}
nrmse = function(real, pred){
rmse(real, pred)/max(real)
}
rmsle = function(real, pred){
sqrt(mean((log(real + 1) - log(pred + 1))^2))
}
#tables of errors----------------------------------------------------------
test_errors_vivax = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
#tables of errors----------------------------------------------------------
test_errors_vivax = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test)
)
)
#write results
test_errors_vivax |> View()
test_errors_vivax |> write_csv('results/test_metrics_microrregion_vivax.csv')
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
micro_v |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
real, preds
) |> write_csv('results/preds_microrregion_vivax_df.csv')
df_vivax = read_csv('results/preds_microrregion_vivax_df.csv')
rmse = function(real, pred){
sqrt(mean((real - pred)^2))
}
mae = function(real, pred){
mean(abs(real - pred))
}
mbe = function(real, pred){
abs(mean(real - pred))
}
rae = function(real, pred){
sum(abs(real - pred))/sum(abs(real - mean(real)))
}
rse = function(real, pred){
sum((real - pred)^2)/sum((real - mean(real))^2)
}
nrmse = function(real, pred){
rmse(real, pred)/max(real)
}
rmsle = function(real, pred){
sqrt(mean((log(real + 1) - log(pred + 1))^2))
}
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_f = read_csv('data/output_data/micro_reg_f_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_f$idArea = pmatch(
micro_f$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_f$idArea2 = micro_f$idArea
#creating id interaction (between area and time)
micro_f$idInteraction = as.numeric(interaction(micro_f$idArea,
micro_f$idMes))
real_rates_all = micro_f$numCasos*100000/micro_f$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
#formulas---------------------------------------------------------------
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp + offset(log(populacao))
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') + offset(log(populacao))
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp + offset(log(populacao))
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 3852: 20544)]
#poisson
poisson_fit3 = inla(
formula = formula3, family = 'poisson', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#poisson predicts
poisson_fit3_rate_all = poisson_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
poi_rate_test = poisson_fit3_rate_all[(20545 - 3852: 20544)]
#nbinomial
nbinomial_fit3 = inla(
formula = formula3, family = 'nbinomial', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#nbinomial predicts
nbinomial_fit3_rate_all = nbinomial_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
nbinomial_rate_test = nbinomial_fit3_rate_all[(20545 - 3852: 20544)]
#zeroinflatedpoisson
zeroinflatedpoisson1_fit2 = inla(
formula = formula2, family = 'zeroinflatedpoisson1', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zip predicts
zero_poi_fit3_rate_all = zeroinflatedpoisson1_fit2$summary.fitted.values$mode*
100000/micro_f$populacao
zero_poi_rate_test = zero_poi_fit3_rate_all[(20545 - 3852: 20544)]
#zeroinflatednbinomial
zeroinflatednbinomial1_fit4 = inla(
formula = formula4, family = 'zeroinflatednbinomial1', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#tables of errors----------------------------------------------------------
test_errors_falciparum = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
#tables of errors----------------------------------------------------------
test_errors_falciparum = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test)
)
)
#write results
test_errors_falciparum |> View()
test_errors_falciparum |>
write_csv('results/test_metrics_microrregion_falciparum.csv')
micro_f$preds = poisson_fit3_rate_all
micro_f$real = real_rates_all
micro_f |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
real, preds
) |> write_csv('results/preds_microrregion_falciparum_df.csv')
df_falciparum = read_csv('results/preds_microrregion_falciparum_df.csv')
df_vivax = read_csv('results/preds_microrregion_vivax_df.csv')
df_falciparum = read_csv('results/preds_microrregion_falciparum_df.csv')
View(df_vivax)
View(df_falciparum)
View(df_vivax)
df_vivax |> group_by(mes, ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = paste0(mes, ano))) +
geom_line(aes(y = real)) +
geom_line(aes y = predito)
df_vivax |> group_by(mes, ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = paste0(mes, ano))) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
library(ggplot2)
df_vivax |> group_by(mes, ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = paste0(mes, ano))) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> group_by(ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = ano))) +
df_vivax |> group_by(ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = ano)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> group_by(mes) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano > 2015) |>
group_by(ano) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = ano)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano = 2016) |>
group_by(mes) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano == 2016) |>
group_by(mes) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano == 2016) |>
group_by(mes) |>
summarise(real = mean(real),
predito = mean(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_falciparum |> filter(ano == 2016) |>
group_by(mes) |>
summarise(real = mean(real),
predito = mean(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_falciparum |> filter(ano == 2016) |>
group_by(mes) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano == 2016) |>
group_by(mes) |>
summarise(real = sum(real),
predito = sum(preds)) |>
ggplot(aes(x = mes)) +
geom_line(aes(y = real)) +
geom_line(aes(y = predito))
df_vivax |> filter(ano == 2016) |> group_by(mes) select(preds) |> sum()
df_vivax |> filter(ano == 2016) |> group_by(mes) |> select(preds) |> sum()
df_vivax |> filter(ano == 2016) |> group_by(mes) |> select(preds) |>
summarise(preds = sum(preds))
df_vivax |> filter(ano == 2016) |> group_by(mes) |> select(preds) |>
summarise(real = sum(real))
df_vivax |> filter(ano == 2016) |> group_by(mes) |> select(real) |>
summarise(real = sum(real))
df_vivax |> filter(ano == 2016) |> group_by(mes) |> select(preds) |>
summarise(preds = sum(preds))
df_vivax |> filter(ano > 2015) |> mutate(dif = real - pred) |>
select(dif) |> boxplot()
df_vivax |> filter(ano > 2015) |> mutate(dif = real - preds) |>
select(dif) |> boxplot()
df_vivax |> filter(ano > 2015) |> mutate(dif = real - preds) |>
select(dif) |> summary()
df_vivax |> filter(ano > 2015) |> mutate(dif = real - preds) |>
select(dif) |> View()
df_vivax$real |> summary()
df_vivax |> filter(ano > 2015) |> mutate(dif = abs(real - preds)) |>
select(dif) |> View()
df_vivax = read_csv('results/preds_microrregion_vivax_df.csv')
df_falciparum = read_csv('results/preds_microrregion_falciparum_df.csv')
