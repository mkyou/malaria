control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = Não convergiu; DIC saturated = Não convergiu; WAIC = Não convergiu
#Não rodou
zeroinflatednbinomial1_fit3 |> summary()
#piora significativa no PIT do modelo
hist(zeroinflatednbinomial1_fit3$cpo$pit, breaks = 10, main = '', xlab = 'PIT')
#formula4
zeroinflatednbinomial1_fit4 = inla(
formula = formula4, family = 'zeroinflatednbinomial1', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#DIC = Não convergiu; DIC saturated = Não convergiu; WAIC = Não convergiu
#não convergiu
zeroinflatednbinomial1_fit4 |> summary()
#PIT levemente pior que o do modelo anterior também
hist(zeroinflatednbinomial1_fit4$cpo$pit, breaks = 10, main = '', xlab = 'PIT')
#check fit3 predictions
zeroinflatednbinomial1_rate_all = zeroinflatednbinomial1_fit4$
summary.fitted.values$mode*
100000/micro_f$populacao
#check fit3 predictions
zeroinflatednbinomial1_rate_all = zeroinflatednbinomial1_fit4$
summary.fitted.values$mode*
100000/micro_f$populacao
zeroinflatednbinomial1_rate_test = zeroinflatednbinomial1_rate_all[(20545
- 3852:
20544)]
tibble(
dist = 'zeroinflatednbinomial1',
mbe = c(
mbe(real_rates_test, zeroinflatednbinomial1_rate_test)
),
nrmse = c(
nrmse(real_rates_test, zeroinflatednbinomial1_rate_test)
),
rae = c(
rae(real_rates_test, zeroinflatednbinomial1_rate_test)
),
rmsle = c(
rmsle(real_rates_test, zeroinflatednbinomial1_rate_test)
),
rse = c(
rse(real_rates_test, zeroinflatednbinomial1_rate_test)
),
cor = c(
cor(real_rates_test, zeroinflatednbinomial1_rate_test)
)
)
rmse = function(real, pred){
sqrt(mean((real - pred)^2))
}
mae = function(real, pred){
mean(abs(real - pred))
}
mbe = function(real, pred){
abs(mean(real - pred))
}
rae = function(real, pred){
sum(abs(real - pred))/sum(abs(real - mean(real)))
}
rse = function(real, pred){
sum((real - pred)^2)/sum((real - mean(real))^2)
}
nrmse = function(real, pred){
rmse(real, pred)/max(real)
}
rmsle = function(real, pred){
sqrt(mean((log(real + 1) - log(pred + 1))^2))
}
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_v = read_csv('data/output_data/micro_reg_v_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_v$idArea = pmatch(
micro_v$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_v$idArea2 = micro_v$idArea
#creating id interaction (between area and time)
micro_v$idInteraction = as.numeric(interaction(micro_v$idArea,
micro_v$idMes))
real_rates_all = micro_v$numCasos*100000/micro_v$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
#formulas---------------------------------------------------------------
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid')
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#poisson
poisson_fit3 = inla(
formula = formula3, family = 'poisson', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#nbinomial
nbinomial_fit3 = inla(
formula = formula3, family = 'nbinomial', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zeroinflatedpoisson
zeroinflatedpoisson1_fit2 = inla(
formula = formula2, family = 'zeroinflatedpoisson1', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zeroinflatednbinomial
zeroinflatednbinomial1_fit4 = inla(
formula = formula4, family = 'zeroinflatednbinomial1', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
bell_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 3852: 20544)]
poisson_fit3_rate_all = poisson_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
poi_rate_test = poisson_fit3_rate_all[(20545 - 3852: 20544)]
#nbinomial predicts
nbinomial_fit3_rate_all = nbinomial_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
nbinomial_rate_test = nbinomial_fit3_rate_all[(20545 - 3852: 20544)]
#zip predicts
zero_poi_fit3_rate_all = zero_poi_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
#zip predicts
zero_poi_fit3_rate_all = zeroinflatedpoisson1_fit2$summary.fitted.values$mode*
100000/micro_v$populacao
zero_poi_rate_test = zero_poi_fit3_rate_all[(20545 - 3852: 20544)]
#zinb predicts
zinb_fit4_rate_all = zeroinflatednbinomial1_fit4$summary.fitted.values$mode*
100000/micro_v$populacao
zero_nbinomial_rate_test = zinb_fit4_rate_all[(20545 - 3852: 20544)]
#tables of errors----------------------------------------------------------
test_errors = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
test_errors |> View()
rm(test_errors)
#tables of errors----------------------------------------------------------
test_errors_vivax = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
test_errors_vivax |> View()
library(readr)
library(INLA)
library(dplyr)
#preparing data------------------------------------------------------------
#path
micro_path = 'outputs/micro_map.graph'
#read data
micro_f = read_csv('data/output_data/micro_reg_f_df.csv')
#spatial data
micro_spatial = read_csv('data/spatial_data/micro_map.csv')
#adjacency matrix
image(inla.graph2matrix(inla.read.graph(micro_path)), xlab = '', ylab = '')
#creating id area
micro_f$idArea = pmatch(
micro_f$codMicroRes,
micro_spatial$code_micro,
duplicates.ok = T
)
micro_f$idArea2 = micro_f$idArea
#creating id interaction (between area and time)
micro_f$idInteraction = as.numeric(interaction(micro_f$idArea,
micro_f$idMes))
real_rates_all = micro_f$numCasos*100000/micro_f$populacao
real_rates_test = real_rates_all[(20545 - 3852: 20544)]
#formulas---------------------------------------------------------------
formula2 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
rhum + temp
formula3 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid')
formula4 = Y ~ f(mes, model = 'rw2', constr = T, cyclic = T) +
f(ano, model = 'rw1', constr = T) +
f(idArea, model = 'bym2', graph = micro_path) +
f(idMes, model = 'rw1') +
f(idInteraction, model = 'iid') +
rhum + temp
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 3852: 20544)]
#poisson
poisson_fit3 = inla(
formula = formula3, family = 'poisson', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#poisson predicts
poisson_fit3_rate_all = poisson_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
poi_rate_test = poisson_fit3_rate_all[(20545 - 3852: 20544)]
#nbinomial
nbinomial_fit3 = inla(
formula = formula3, family = 'nbinomial', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#nbinomial predicts
nbinomial_fit3_rate_all = nbinomial_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
nbinomial_rate_test = nbinomial_fit3_rate_all[(20545 - 3852: 20544)]
#zeroinflatedpoisson
zeroinflatedpoisson1_fit2 = inla(
formula = formula2, family = 'zeroinflatedpoisson1', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zip predicts
zero_poi_fit3_rate_all = zeroinflatedpoisson1_fit2$summary.fitted.values$mode*
100000/micro_f$populacao
zero_poi_rate_test = zero_poi_fit3_rate_all[(20545 - 3852: 20544)]
#zeroinflatednbinomial
zeroinflatednbinomial1_fit4 = inla(
formula = formula4, family = 'zeroinflatednbinomial1', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#zinb predicts
zinb_fit4_rate_all = zeroinflatednbinomial1_fit4$summary.fitted.values$mode*
100000/micro_f$populacao
zero_nbinomial_rate_test = zinb_fit4_rate_all[(20545 - 3852: 20544)]
#tables of errors----------------------------------------------------------
test_errors_falciparum = dplyr::tibble(
dist = c('bell', 'poisson', 'nbinomial', 'zero_poisson',
'zero_nbinomial'),
mbe = c(
mbe(real_rates_test, bell_rate_test),
mbe(real_rates_test, poi_rate_test),
mbe(real_rates_test, nbinomial_rate_test),
mbe(real_rates_test, zero_poi_rate_test),
mbe(real_rates_test, zero_nbinomial_rate_test)
),
nrmse = c(
nrmse(real_rates_test, bell_rate_test),
nrmse(real_rates_test, poi_rate_test),
nrmse(real_rates_test, nbinomial_rate_test),
nrmse(real_rates_test, zero_poi_rate_test),
nrmse(real_rates_test, zero_nbinomial_rate_test)
),
rae = c(
rae(real_rates_test, bell_rate_test),
rae(real_rates_test, poi_rate_test),
rae(real_rates_test, nbinomial_rate_test),
rae(real_rates_test, zero_poi_rate_test),
rae(real_rates_test, zero_nbinomial_rate_test)
),
rmsle = c(
rmsle(real_rates_test, bell_rate_test),
rmsle(real_rates_test, poi_rate_test),
rmsle(real_rates_test, nbinomial_rate_test),
rmsle(real_rates_test, zero_poi_rate_test),
rmsle(real_rates_test, zero_nbinomial_rate_test)
),
rse = c(
rse(real_rates_test, bell_rate_test),
rse(real_rates_test, poi_rate_test),
rse(real_rates_test, nbinomial_rate_test),
rse(real_rates_test, zero_poi_rate_test),
rse(real_rates_test, zero_nbinomial_rate_test)
),
cor = c(
cor(real_rates_test, bell_rate_test),
cor(real_rates_test, poi_rate_test),
cor(real_rates_test, nbinomial_rate_test),
cor(real_rates_test, zero_poi_rate_test),
cor(real_rates_test, zero_nbinomial_rate_test)
)
)
test_errors_falciparum |> View()
test_errors_vivax |> write_csv('results/test_metrics_microrregion_vivax.csv')
test_errors_falciparum |>
write_csv('results/test_metrics_microrregion_falciparum.csv')
micro_v$preds = bell_fit3_rate_all
micro_v |> colnames()
micro_v |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
numCasos, preds
) |> write_csv('results/preds_microrregion_vivax_df.csv')
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
micro_v$preds = bell_fit3_rate_all
micro_v |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
numCasos, preds
) |> write_csv('results/preds_microrregion_vivax_df.csv')
#poisson
poisson_fit3 = inla(
formula = formula3, family = 'poisson', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#poisson predicts
poisson_fit3_rate_all = poisson_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
poi_rate_test = poisson_fit3_rate_all[(20545 - 3852: 20544)]
micro_f$preds = poisson_fit3_rate_all
micro_f |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
numCasos, preds
) |> write_csv('results/preds_microrregion_falciparum_df.csv')
#best vivax models-------------------------------------------------------
#bell
bell_fit3 = inla(
formula = formula3, family = 'bell', data = micro_v,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#bell predicts
bell_fit3_rate_all = bell_fit3$summary.fitted.values$mode*
100000/micro_v$populacao
bell_rate_test = bell_fit3_rate_all[(20545 - 3852: 20544)]
micro_v$preds = bell_fit3_rate_all
micro_v$real = real_rates_all
micro_v |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
real, preds
) |> write_csv('results/preds_microrregion_vivax_df.csv')
#poisson
poisson_fit3 = inla(
formula = formula3, family = 'poisson', data = micro_f,
working.directory = 'D:/INLA/',
control.predictor = list(compute = T, link = 1),
control.compute = list(dic = T, waic = T, cpo = T),
verbose = F
)
#poisson predicts
poisson_fit3_rate_all = poisson_fit3$summary.fitted.values$mode*
100000/micro_f$populacao
poi_rate_test = poisson_fit3_rate_all[(20545 - 3852: 20544)]
real_rates_all = micro_f$numCasos*100000/micro_f$populacao
micro_f$preds = poisson_fit3_rate_all
micro_f$real = real_rates_all
micro_f |>
select(
codUF, siglaUF, codMicroRes, nomeMicroRes, ano, mes,
real, preds
) |> write_csv('results/preds_microrregion_falciparum_df.csv')
